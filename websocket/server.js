const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const os = require('os');

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*' } });

// roomId -> { host: socketId|null, guest: socketId|null, hostReady: boolean, guestReady: boolean, negotiationStarted: boolean, lastActivity: timestamp, codeEditorUsers: Map }
const rooms = {};

// Cleanup —Å—Ç–∞—Ä–∏—Ç–µ rooms –Ω–∞ –≤—Å–µ–∫–∏ 30 —Å–µ–∫—É–Ω–¥–∏
setInterval(() => {
    const now = Date.now();
    const ROOM_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç–∏

    for (const roomId in rooms) {
        const room = rooms[roomId];
        if (now - room.lastActivity > ROOM_TIMEOUT) {
            console.log(`üóëÔ∏è Cleaning up inactive room ${roomId}`);
            delete rooms[roomId];
        }
    }
}, 30000);

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ª–æ–∫–∞–ª–Ω–∏—è IP –∞–¥—Ä–µ—Å
function getLocalIPAddress() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            if (!iface.internal && iface.family === 'IPv4') {
                return iface.address;
            }
        }
    }
    return '127.0.0.1';
}

// Code execution function (simplified - –≤ production –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ sandbox)
function executeCode(code, language) {
    try {
        if (language === 'javascript') {
            // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ eval —Å–∞–º–æ –∑–∞ demo - –ù–ï –ø—Ä–∞–≤–µ—Ç–µ —Ç–æ–≤–∞ –≤ production!
            const originalLog = console.log;
            let output = '';
            console.log = (...args) => {
                output += args.join(' ') + '\n';
            };

            eval(code);
            console.log = originalLog;
            return { output: output || 'Code executed successfully' };
        } else {
            return { output: `Code execution for ${language} is not implemented in this demo.\nCode:\n${code}` };
        }
    } catch (error) {
        return { error: `Error: ${error.message}` };
    }
}

// Reset negotiation —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ room
function resetNegotiation(roomId) {
    const room = rooms[roomId];
    if (room) {
        console.log(`üîÑ Resetting negotiation for room ${roomId}`);
        room.negotiationStarted = false;
        room.lastActivity = Date.now();

        // –£–≤–µ–¥–æ–º–∏ –≤—Å–∏—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏—Ü–∏ —á–µ —Ç—Ä—è–±–≤–∞ –¥–∞ reset-–Ω–∞—Ç connection
        io.to(roomId).emit('resetConnection');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ negotiation
function tryStartNegotiation(roomId) {
    const room = rooms[roomId];
    if (!room) return;

    console.log(`üîç Checking if negotiation can start for room ${roomId}:`, {
        host: !!room.host,
        guest: !!room.guest,
        hostReady: room.hostReady,
        guestReady: room.guestReady,
        negotiationStarted: room.negotiationStarted
    });

    // –ó–∞–ø–æ—á–Ω–∏ negotiation –°–ê–ú–û –∫–æ–≥–∞—Ç–æ –∏ –¥–≤–∞–º–∞—Ç–∞ —Å–∞ ready –∏ –Ω–µ –µ –∑–∞–ø–æ—á–≤–∞–ª–æ –ø—Ä–µ–¥–∏
    if (room.host && room.guest && room.hostReady && room.guestReady && !room.negotiationStarted) {
        console.log(`üöÄ Starting negotiation for room ${roomId} - signaling HOST`);
        room.negotiationStarted = true;
        room.lastActivity = Date.now();

        // –ò–∑–ø—Ä–∞—â–∞–º–µ —Å—ä—Å small delay –∑–∞ –¥–∞ —Å–µ —É–≤–µ—Ä–∏–º —á–µ tracks —Å–∞ –≥–æ—Ç–æ–≤–∏
        setTimeout(() => {
            if (rooms[roomId]?.host) { // Double check —á–µ room –≤—Å–µ –æ—â–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
                io.to(room.host).emit('startNegotiation');
            }
        }, 500);
    }
}

io.on('connection', (socket) => {
    console.log('‚úÖ Connected:', socket.id);

    // ============ VIDEO CALL EVENTS ============

    socket.on('joinRoom', ({ roomId, role }) => {
        if (!roomId) return;

        console.log(`üîç Join request: ${socket.id} wants role "${role}" in room ${roomId}`);

        if (!rooms[roomId]) {
            rooms[roomId] = {
                host: null,
                guest: null,
                hostReady: false,
                guestReady: false,
                negotiationStarted: false,
                lastActivity: Date.now(),
                codeEditorUsers: new Map()
            };
        }
        const room = rooms[roomId];
        room.lastActivity = Date.now();

        let finalRole = role;

        // –ê–∫–æ –Ω—è–∫–æ–π —Å–µ –æ–ø–∏—Ç–≤–∞ –¥–∞ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏ –æ—Ç–Ω–æ–≤–æ —Å—ä—Å —Å—ä—â–∞—Ç–∞ —Ä–æ–ª—è
        if (role === 'host' && room.host === socket.id) {
            console.log(`üîÑ Host ${socket.id} rejoining room ${roomId}`);
            resetNegotiation(roomId);
        } else if (role === 'guest' && room.guest === socket.id) {
            console.log(`üîÑ Guest ${socket.id} rejoining room ${roomId}`);
            resetNegotiation(roomId);
        }

        // –õ–æ–≥–∏–∫–∞ –∑–∞ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª–∏
        if (role === 'host') {
            if (room.host && room.host !== socket.id) {
                console.log(`‚ö†Ô∏è Host slot taken, assigning guest role to ${socket.id}`);
                finalRole = 'guest';
            }
        }

        if (finalRole === 'guest') {
            if (room.guest && room.guest !== socket.id) {
                if (room.host && room.guest) {
                    console.log(`‚ùå Room ${roomId} is full`);
                    socket.emit('roomFull');
                    return;
                }
            }
        }

        // –ê–∫–æ –Ω—è–∫–æ–π —Å–º–µ–Ω—è —Ä–æ–ª—è—Ç–∞ —Å–∏, reset-–≤–∞–º–µ negotiation
        if ((finalRole === 'host' && room.host !== socket.id) ||
            (finalRole === 'guest' && room.guest !== socket.id)) {
            resetNegotiation(roomId);
        }

        // –ü—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è—Ç–∞
        if (finalRole === 'host') {
            room.host = socket.id;
            room.hostReady = false; // Reset ready —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
            console.log(`üëë ${socket.id} is now HOST in room ${roomId}`);
        } else {
            room.guest = socket.id;
            room.guestReady = false; // Reset ready —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
            console.log(`üë§ ${socket.id} is now GUEST in room ${roomId}`);
        }

        socket.join(roomId);
        socket.emit('roleAssigned', finalRole);

        console.log(`üìä Room ${roomId} state:`, {
            host: room.host,
            guest: room.guest,
            hostReady: room.hostReady,
            guestReady: room.guestReady,
            negotiationStarted: room.negotiationStarted
        });

        // –£–≤–µ–¥–æ–º–∏ –¥—Ä—É–≥–∏—è —É—á–∞—Å—Ç–Ω–∏–∫, —á–µ –Ω—è–∫–æ–π —Å–µ –µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏–ª
        socket.to(roomId).emit('userJoined', { role: finalRole, socketId: socket.id });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–∂–µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ negotiation
        setTimeout(() => tryStartNegotiation(roomId), 1000);
    });

    socket.on('ready', ({ roomId, role }) => {
        const room = rooms[roomId];
        if (!room) {
            console.log(`‚ùå Ready event for non-existent room: ${roomId}`);
            return;
        }

        console.log(`üìå ${role} (${socket.id}) is ready in room ${roomId}`);

        if (role === 'host') room.hostReady = true;
        else room.guestReady = true;

        room.lastActivity = Date.now();

        console.log(`üìä Room ${roomId} ready state:`, {
            host: room.host,
            guest: room.guest,
            hostReady: room.hostReady,
            guestReady: room.guestReady,
            negotiationStarted: room.negotiationStarted
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–∂–µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ negotiation
        setTimeout(() => tryStartNegotiation(roomId), 500);
    });

    socket.on('needRenegotiate', ({ roomId }) => {
        const room = rooms[roomId];
        console.log(`üîÑ Renegotiation requested for room ${roomId} by ${socket.id}`);
        if (room?.host) {
            console.log(`üì§ Sending startNegotiation to host ${room.host}`);
            io.to(room.host).emit('startNegotiation');
        }
    });

    // WebRTC signaling —Å logging
    socket.on('offer', ({ roomId, offer }) => {
        console.log(`üì§ Offer sent by ${socket.id} to room ${roomId}`);
        socket.to(roomId).emit('offer', offer);
        if (rooms[roomId]) rooms[roomId].lastActivity = Date.now();
    });

    socket.on('answer', ({ roomId, answer }) => {
        console.log(`üì§ Answer sent by ${socket.id} to room ${roomId}`);
        socket.to(roomId).emit('answer', answer);
        if (rooms[roomId]) rooms[roomId].lastActivity = Date.now();
    });

    socket.on('ice-candidate', ({ roomId, candidate }) => {
        console.log(`‚ùÑÔ∏è ICE candidate from ${socket.id} to room ${roomId}`);
        socket.to(roomId).emit('ice-candidate', candidate);
        if (rooms[roomId]) rooms[roomId].lastActivity = Date.now();
    });

    // –ù–æ–≤ event –∑–∞ connection established
    socket.on('connectionEstablished', ({ roomId }) => {
        console.log(`üéâ Connection established in room ${roomId} by ${socket.id}`);
        if (rooms[roomId]) {
            rooms[roomId].lastActivity = Date.now();
        }
    });

    // ============ CODE EDITOR EVENTS ============

    socket.on('joinCodeEditor', ({ roomId, user }) => {
        console.log(`üìù ${user.name} joining code editor in room ${roomId}`);

        if (!rooms[roomId]) {
            rooms[roomId] = {
                host: null,
                guest: null,
                hostReady: false,
                guestReady: false,
                negotiationStarted: false,
                lastActivity: Date.now(),
                codeEditorUsers: new Map()
            };
        }

        const room = rooms[roomId];
        room.codeEditorUsers.set(socket.id, user);
        room.lastActivity = Date.now();

        socket.join(`${roomId}-code`);

        // –£–≤–µ–¥–æ–º–∏ –¥—Ä—É–≥–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        socket.to(`${roomId}-code`).emit('codeEditorUserJoined', user);

        // –ò–∑–ø—Ä–∞—Ç–∏ —Å–ø–∏—Å—ä–∫ —Å —Ç–µ–∫—É—â–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –Ω–∞ –Ω–æ–≤–∏—è user
        const otherUsers = Array.from(room.codeEditorUsers.values()).filter(u => u.id !== user.id);
        otherUsers.forEach(otherUser => {
            socket.emit('codeEditorUserJoined', otherUser);
        });
    });

    socket.on('leaveCodeEditor', ({ roomId, userId }) => {
        console.log(`üìù User ${userId} leaving code editor in room ${roomId}`);

        const room = rooms[roomId];
        if (room) {
            room.codeEditorUsers.delete(socket.id);
            socket.to(`${roomId}-code`).emit('codeEditorUserLeft', userId);
        }

        socket.leave(`${roomId}-code`);
    });

    socket.on('codeChange', ({ roomId, change }) => {
        console.log(`üìù Code change in room ${roomId} by ${change.userId}`);
        socket.to(`${roomId}-code`).emit('codeChange', change);

        if (rooms[roomId]) {
            rooms[roomId].lastActivity = Date.now();
        }
    });

    socket.on('languageChange', ({ roomId, language, userId }) => {
        console.log(`üîÑ Language change to ${language} in room ${roomId}`);
        socket.to(`${roomId}-code`).emit('languageChange', { language, userId });

        if (rooms[roomId]) {
            rooms[roomId].lastActivity = Date.now();
        }
    });

    socket.on('codeExecution', ({ roomId, code, language, userId }) => {
        console.log(`‚ñ∂Ô∏è Code execution request in room ${roomId} by ${userId}`);

        const result = executeCode(code, language);

        // –ò–∑–ø—Ä–∞—â–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤—Å–∏—á–∫–∏ –≤ —Å—Ç–∞—è—Ç–∞
        io.to(`${roomId}-code`).emit('codeExecutionResult', result);

        if (rooms[roomId]) {
            rooms[roomId].lastActivity = Date.now();
        }
    });

    socket.on('codeReset', ({ roomId, code, userId }) => {
        console.log(`üîÑ Code reset in room ${roomId} by ${userId}`);
        socket.to(`${roomId}-code`).emit('codeChange', {
            range: {
                startLineNumber: 1,
                startColumn: 1,
                endLineNumber: Number.MAX_SAFE_INTEGER,
                endColumn: 1
            },
            text: code,
            timestamp: Date.now(),
            userId: userId
        });

        if (rooms[roomId]) {
            rooms[roomId].lastActivity = Date.now();
        }
    });

    // ============ DISCONNECT HANDLING ============

    socket.on('disconnect', () => {
        console.log('‚ùå Disconnected:', socket.id);

        // –ü–æ—á–∏—Å—Ç–∏ rooms
        for (const roomId in rooms) {
            const room = rooms[roomId];
            let changed = false;

            if (room.host === socket.id) {
                console.log(`üëë Host ${socket.id} left room ${roomId}`);
                room.host = null;
                room.hostReady = false;
                resetNegotiation(roomId);
                changed = true;
            }
            if (room.guest === socket.id) {
                console.log(`üë§ Guest ${socket.id} left room ${roomId}`);
                room.guest = null;
                room.guestReady = false;
                resetNegotiation(roomId);
                changed = true;
            }

            if (changed) {
                // –£–≤–µ–¥–æ–º–∏ –æ—Å—Ç–∞–Ω–∞–ª–∏—è —É—á–∞—Å—Ç–Ω–∏–∫
                socket.to(roomId).emit('userLeft', { socketId: socket.id });

                // –ü–æ—á–∏—Å—Ç–∏ –∏ –æ—Ç code editor
                if (room.codeEditorUsers && room.codeEditorUsers.has(socket.id)) {
                    const user = room.codeEditorUsers.get(socket.id);
                    room.codeEditorUsers.delete(socket.id);
                    socket.to(`${roomId}-code`).emit('codeEditorUserLeft', user.id);
                }

                if (!room.host && !room.guest) {
                    console.log(`üóëÔ∏è Deleting empty room ${roomId}`);
                    delete rooms[roomId];
                }
                break;
            }
        }
    });

    // ============ DEBUG COMMANDS ============

    socket.on('debugRooms', () => {
        socket.emit('debugInfo', { rooms: Object.fromEntries(
                Object.entries(rooms).map(([roomId, room]) => [
                    roomId,
                    {
                        ...room,
                        codeEditorUsers: Array.from(room.codeEditorUsers?.values() || [])
                    }
                ])
            )});
    });
});

// ============ SERVER STARTUP ============

const localIP = getLocalIPAddress();
const PORT = process.env.PORT || 8001;
const HOST = process.env.HOST || '127.0.0.1';

server.listen(PORT, HOST, () => {
    console.log(`üöÄ WebSocket server running on:`);
    console.log(`   - Local:   http://127.0.0.1:${PORT}`);
    console.log(`   - Network: http://${localIP}:${PORT}`);
    console.log(`   - All interfaces: http://${HOST}:${PORT}`);
    console.log('');
    console.log('üìã Supported events:');
    console.log('   Video Call: joinRoom, ready, offer, answer, ice-candidate');
    console.log('   Code Editor: joinCodeEditor, codeChange, languageChange, codeExecution');
    console.log('   Debug: debugRooms');
});